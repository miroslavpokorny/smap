using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using smap;
using smap.Data;

namespace Test
{
    [TestFixture]
    public class DecodeEncodeTest
    {
        private readonly byte[] _file1 = { 0xf8, 0x93, 0x53, 0xa5, 0xc4, 0xbc, 0x53, 0xa8, 0x4f, 0x57, 0x93, 0xd8, 0x7b, 0x0e, 0x0d, 0x6f, 0x26, 0xa5, 0x2f, 0x2e, 0x60, 0x2f, 0xf0, 0xf3, 0xba, 0xd8, 0xbb, 0xd5, 0x91, 0x43, 0x86, 0xc0, 0xe2, 0x46, 0xa9, 0xc5, 0x8e, 0x48, 0x51, 0x72, 0xcb, 0x9e, 0x16, 0x2e, 0xb4, 0xb9, 0xe7, 0x16, 0xf2, 0xff, 0xe7, 0x45, 0x32, 0x00, 0x75, 0xc3, 0x5b, 0x13, 0xaf, 0xf0, 0xe9, 0x8a, 0x6c, 0xea, 0x56, 0xdb, 0xe5, 0x47, 0x00, 0x95, 0x94, 0xe2, 0xf8, 0xc9, 0xaa, 0xef, 0x93, 0xba, 0xe8, 0xf4 };
        private readonly byte[] _file2 = { 0x37, 0x16, 0x9f, 0x31, 0xe6, 0x67, 0xd6, 0x19, 0x96, 0xb6, 0xfa, 0x06, 0x74, 0x85, 0x8c, 0xed, 0xf2, 0x22, 0x4c, 0x9d, 0xef, 0xf4, 0x1e, 0xbd, 0xb0, 0x85, 0x00, 0x39, 0x7c, 0x68, 0x3e, 0xec, 0x40, 0x2f, 0x8d, 0xca, 0x56, 0x61, 0x1f, 0x0c, 0xc8, 0x58, 0xcf, 0x95, 0xec, 0x72, 0xad, 0x2a, 0xc3, 0xbe, 0xf9, 0xd9, 0x16, 0x77, 0x3f, 0x58, 0xbb, 0x9a, 0x7f, 0x00, 0x81, 0x3a, 0x89, 0xc9, 0x59, 0x07, 0x5e, 0xe6, 0x6c, 0x92, 0x69, 0x2d, 0x41, 0x01, 0xa9, 0x06, 0x24, 0x98, 0xc3, 0x47, 0xf3, 0xcc, 0x79, 0xb5, 0x26, 0x00, 0x01, 0x74, 0xe7, 0xc1, 0xa2, 0x1b, 0x05, 0x98, 0x35, 0x95, 0xe4, 0x52, 0x09};
        private readonly byte[] _file3 = { 0x11, 0xe4, 0x68, 0x2d, 0xe5, 0xf6, 0xf6, 0x51, 0xd4, 0x4a, 0x2c, 0xb7, 0xb9, 0xbe, 0x1c, 0x2e, 0xbc, 0x52, 0xf8, 0xa1, 0xad, 0x25, 0x1f, 0x31, 0xb6, 0x1a, 0xa0, 0x16, 0xa8, 0xf5, 0xd1, 0x18, 0x00, 0x9f, 0xa4, 0xcb, 0xe0, 0xa9, 0xcb, 0xa6, 0xe4, 0x89, 0x5d, 0x2e, 0x9e, 0x54, 0xa8, 0xec, 0x65, 0x4c, 0x17, 0x0d, 0xb1, 0x60, 0xc4, 0x32, 0xfd, 0x11, 0x9f, 0x45, 0xd1, 0xe9, 0xc8, 0x85, 0x35, 0x3b, 0x1d, 0xd5, 0x2f, 0xc6, 0x59, 0x98, 0xe3, 0x1e, 0xcf, 0x02, 0xaf, 0xfc, 0x88, 0xe1, 0x89, 0x9b, 0x6a, 0x26, 0x98, 0x93, 0x08, 0xd3, 0x15, 0x66, 0x6b, 0x44, 0x76, 0x78, 0xf0, 0xfe, 0xf1, 0x99, 0x60, 0x56, 0x42, 0xbb, 0xaa, 0xb3, 0x52, 0xa4, 0x4c, 0xe9, 0xca, 0xae, 0xb1, 0x5b, 0x0c, 0x28, 0x19, 0xe8, 0x07, 0x58, 0xeb, 0x75, 0x7d, 0x1e, 0x9c, 0xbd, 0xd5, 0x93, 0x6e, 0x14, 0x39, 0xb1, 0xb9, 0x2e, 0x83, 0xbb, 0x54, 0x18, 0xba, 0x87, 0x38, 0x20, 0x99, 0x2e, 0x7a, 0xd8, 0x50, 0x45, 0xd0, 0x00, 0xee, 0x8e, 0x87, 0x0a, 0x7b, 0x8b, 0x4f, 0x33, 0xc4, 0x31, 0x4a, 0x3e, 0xa2, 0x71, 0x38, 0x49, 0x9c, 0xd0, 0x11, 0x57, 0xf3, 0x68, 0xe2, 0x2e, 0x5c, 0x38, 0xbd, 0x60, 0xa3, 0xd1, 0x68, 0xe4, 0x15, 0x4d, 0x8f};

        [Test]
        public void EncodeDecodeTest()
        {
            foreach (var file in new List<byte[]> { _file1, _file2, _file3 })
            {
                var encoded = Encoder.Encode(file);
                var decoded = Decoder.Decode(encoded);
                Assert.True(decoded.SequenceEqual(file));
            }
        }
    }
}